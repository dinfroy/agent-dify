"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  checkbox: () => checkbox,
  file: () => file,
  formData: () => formData,
  json: () => json,
  numeric: () => numeric,
  preprocessFormData: () => preprocessFormData,
  repeatable: () => repeatable,
  repeatableOfType: () => repeatableOfType,
  text: () => text,
  zfd: () => helpers_exports
});
module.exports = __toCommonJS(src_exports);

// src/helpers.ts
var helpers_exports = {};
__export(helpers_exports, {
  checkbox: () => checkbox,
  file: () => file,
  formData: () => formData,
  json: () => json,
  numeric: () => numeric,
  preprocessFormData: () => preprocessFormData,
  repeatable: () => repeatable,
  repeatableOfType: () => repeatableOfType,
  text: () => text
});
var import_set_get = require("@rvf/set-get");
var import_zod = require("zod");
var stripEmpty = import_zod.z.literal("").transform(() => void 0);
var preprocessIfValid = (schema) => (val) => {
  const result = schema.safeParse(val);
  if (result.success)
    return result.data;
  return val;
};
var text = (schema = import_zod.z.string()) => import_zod.z.preprocess(preprocessIfValid(stripEmpty), schema);
var numeric = (schema = import_zod.z.number()) => import_zod.z.preprocess(
  preprocessIfValid(
    import_zod.z.union([
      stripEmpty,
      import_zod.z.string().transform((val) => Number(val)).refine((val) => !Number.isNaN(val))
    ])
  ),
  schema
);
var checkbox = ({ trueValue = "on" } = {}) => import_zod.z.union([
  import_zod.z.literal(trueValue).transform(() => true),
  import_zod.z.literal(void 0).transform(() => false)
]);
var file = (schema = import_zod.z.instanceof(File)) => import_zod.z.preprocess((val) => {
  return val instanceof File && val.size === 0 ? void 0 : val;
}, schema);
var repeatable = (schema = import_zod.z.array(text())) => {
  return import_zod.z.preprocess((val) => {
    if (Array.isArray(val))
      return val;
    if (val === void 0)
      return [];
    return [val];
  }, schema);
};
var repeatableOfType = (schema) => repeatable(import_zod.z.array(schema));
var entries = import_zod.z.array(import_zod.z.tuple([import_zod.z.string(), import_zod.z.any()]));
var safeParseJson = (jsonString) => {
  try {
    return JSON.parse(jsonString);
  } catch {
    return jsonString;
  }
};
var json = (schema) => import_zod.z.preprocess(
  preprocessIfValid(
    import_zod.z.union([stripEmpty, import_zod.z.string().transform((val) => safeParseJson(val))])
  ),
  schema
);
var processFormData = preprocessIfValid(
  // We're avoiding using `instanceof` here because different environments
  // won't necessarily have `FormData` or `URLSearchParams`
  import_zod.z.any().refine((val) => Symbol.iterator in val).transform((val) => [...val]).refine(
    (val) => entries.safeParse(val).success
  ).transform((data) => {
    const map = /* @__PURE__ */ new Map();
    for (const [key, value] of data) {
      if (map.has(key)) {
        map.get(key).push(value);
      } else {
        map.set(key, [value]);
      }
    }
    return [...map.entries()].reduce(
      (acc, [key, value]) => {
        return (0, import_set_get.setPath)(acc, key, value.length === 1 ? value[0] : value);
      },
      {}
    );
  })
);
var preprocessFormData = processFormData;
var formData = (shapeOrSchema) => import_zod.z.preprocess(
  processFormData,
  shapeOrSchema instanceof import_zod.ZodType ? shapeOrSchema : import_zod.z.object(shapeOrSchema)
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  checkbox,
  file,
  formData,
  json,
  numeric,
  preprocessFormData,
  repeatable,
  repeatableOfType,
  text,
  zfd
});
//# sourceMappingURL=index.js.map